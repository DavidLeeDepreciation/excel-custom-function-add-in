{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/functions/functions.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","add","first","second","clock","invocation","timer","setInterval","time","currentTime","setResult","onCanceled","clearInterval","Date","toLocaleTimeString","increment","incrementBy","result","logMessage","message","console","log","unpivot","headers","rows","values","unpivot_data","row","length","header","push"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,mCC1ErD,SAAgBC,EAAIC,EAAeC,GACjC,OAAOD,EAAQC,EAQjB,SAAgBC,EAAMC,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,EAAOC,IACbJ,EAAWK,UAAUF,KACpB,KAEHH,EAAWM,WAAa,WACtBC,cAAcN,IAQlB,SAAgBG,IACd,OAAO,IAAII,MAAOC,qBASpB,SAAgBC,EAAUC,EAAqBX,GAC7C,IAAIY,EAAS,EACPX,EAAQC,aAAY,WACxBU,GAAUD,EACVX,EAAWK,UAAUO,KACpB,KAEHZ,EAAWM,WAAa,WACtBC,cAAcN,IAUlB,SAAgBY,EAAWC,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,EAWT,SAAgBG,EAAQC,EAASC,EAAMC,GAIrC,IAFA,IAAIC,EAAe,GAEVC,EAAM,EAAGA,GAAMH,EAAKI,OAAQD,IAEnC,IAAK,IAAIE,EAAQA,GAAQN,EAAQK,OAAQC,IACvCH,EAAaI,KAAK,CAACN,EAAKG,GAAMJ,EAAQM,GAASJ,EAAOE,GAAKE,KAI/D,OAAOH,E,iDA7ET,QASA,UAeA,gBAUA,cAkBA,eAcA,Y","file":"functions.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 121);\n","/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\n/* global clearInterval, console, setInterval */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy: number, invocation: CustomFunctions.StreamingInvocation<number>): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Unpivots a range of cells.\n * @customfunction UNPIVOT\n * @param headers {[]} The range of cells that represent your headers.\n * @param rows {[]} The range of cells that represent your row headers.\n * @param values {[][]} The range of cells that represent your range of values.\n * @returns {[][]} The normalized range of cells.\n */\nexport function unpivot(headers, rows, values): any[]{\n\n  let unpivot_data = [];\n\n  for (var row = 1; row <=rows.length; row++){\n\n    for (var header; header<=headers.length; header++){\n      unpivot_data.push([rows[row], headers[header], values[row][header]]);\n    }\n  }\n\n  return unpivot_data\n\n}\n  //         'Put all the pieces together.\n  //         UnpivotData(row_num, 1) = RowField\n  //         UnpivotData(row_num, 2) = ColumnResult(1, j)\n  //         UnpivotData(row_num, 3) = ValueResult(i, j)\n          \n  //         'Increment the row number\n  //         row_num = row_num + 1\n  \n    // var numColumns = source.getLastColumn();\n    // var numRows = source.getLastRow();  \n  \n    // //GET NUMBER OF HEADERS (PRODUCTS)  \n    // var products = []; // get product models in the first row\n\n    // for (var b = 2; b <= numColumns; b++){\n    //   if (source.getRange(1, b).getValue() != \"\") {\n    //     products.push([source.getRange(1, b).getValue()]); //store\n    //   }\n    // }\n  \n    // // PRODUCTS and SITES INTO COLUMNS\n    // var output = [];  \n    // var sites = []; // get sites list\n    // for (var a = 3; a <= numRows; a++){\n    //   if (source.getRange(a, 1).getValue() != \"\") {\n    //     sites.push([source.getRange(a, 1).getValue()]); //store\n    //   }\n    // }\n  \n    // for(var p in products){\n    //   for(var s in sites){\n    //     var row = [];\n    //     row.push(sites[s]);\n    //     row.push(products[p]);\n    //     output.push(row);//collect data in separate rows in output array\n    //   }\n    //  }\n  \n    // var date = Utilities.formatDate(new Date(), SpreadsheetApp.getActive().getSpreadsheetTimeZone(), \"M/d/yyyy\");\n    // Logger.log('Date = ' +date)\n    // ss.insertSheet(date,0).getRange(1,1,output.length,output[0].length).setValues(output);\n  \n    //   var newSheet = ss.getSheetByName(date);\n  \n  \n    // // COPY REGIONS\n  \n    // var numProducts = products.length; // number of models\n    // Logger.log('numProducts = ' +numProducts);\n  \n    // var i = 1;\n    // var j = 3 // first column number to copy\n    // do {\n    //   var colC = newSheet.getRange(\"C1:C\").getValues();\n    //   var copyToCell = colC.filter(String).length+1;\n    //   Logger.log('copyTo R = ' +copyToCell);\n  \n    //   source.getRange(3,2,numRows-2,1).copyTo(newSheet.getRange(copyToCell,3), {contentsOnly:true});\n    //   i++;\n  \n    //   source.getRange(3,j,numRows-2,2).copyTo(newSheet.getRange(copyToCell,4), {contentsOnly:true});\n    //   j+=2;  \n    // }\n    // while (i <= numProducts);\n    // while (j < numColumns);\n  \n  \n    // // SORT BY SITE AND PRODUCT  \n    // newSheet.getDataRange().sort([1, 2]);\n\n\n  // 'Take the ranges passed through and grab their values.\n  // ValueResult = Value_Range.Value\n  // ColumnResult = Column_Range.Value\n  // RowResult = Row_Range.Value\n  \n  // 'Calculate the number of Columns and Rows Needed\n  // NumberOfColsNeeded = Row_Range.Columns.Count + Column_Range.Rows.Count\n  // NumberOfRowsNeeded = Row_Range.Rows.Count * Column_Range.Columns.Count\n  \n  // 'Resize the UnpivotData Array, so it matches the number of rows and columns needed.\n  // ReDim UnpivotData(1 To NumberOfRowsNeeded, 1 To NumberOfColsNeeded + 1)\n  \n  // 'Initalize the row number\n  // row_num = 1\n  \n  // 'Loop through each Row.\n  // For i = 1 To Row_Range.Rows.Count\n      \n  //     'Grab the Row Field\n  //     RowField = RowResult(i, 1)\n      \n  //     'Loop through each column\n  //     For j = 1 To Column_Range.Columns.Count\n          \n  //         'Put all the pieces together.\n  //         UnpivotData(row_num, 1) = RowField\n  //         UnpivotData(row_num, 2) = ColumnResult(1, j)\n  //         UnpivotData(row_num, 3) = ValueResult(i, j)\n          \n  //         'Increment the row number\n  //         row_num = row_num + 1\n  //     Next\n  // Next\n\n  // headers\n  // rows\n  // values"],"sourceRoot":""}